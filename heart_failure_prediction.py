# -*- coding: utf-8 -*-
"""Heart_Failure_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/168x7ppjG3cb4rfaPC6Ja4U20p4mA42Yb
"""

# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.express as pltpx

from google.colab import files
upload=files.upload()

data= "/content/heart (1).csv"
df = pd.read_csv(data)

df.head()

df.dtypes

df.shape

df.info()

df.describe().T

corr = df.select_dtypes(include='number').corr()
corr

plt.figure(figsize=(12,6))
sns.heatmap(corr,annot=True)

# Create pie chart
fig = px.pie(df, values='HeartDisease', names='Sex', title='Gender differences in Heart Failure')
fig.show()

pltpx.pie(df,values='HeartDisease',names='ChestPainType')

pltpx.scatter(df,x='Age',y='RestingBP',color='Sex',color_discrete_map={'F':'red','M':'blue'},title="Age Vs. RestingBP")

pltpx.scatter(df,x='Age',y='MaxHR',color='Sex',color_discrete_map={'F':'red','M':'blue'},title="Age Vs. MaxHR")

pltpx.histogram(df,x='ChestPainType',color='Sex',title='Major types of Chest Pains')

pltpx.histogram(df,x='RestingECG',color='Sex')

pltpx.histogram(df,x='ST_Slope',color='Sex',title='Count Of ST_Slope')

pltpx.histogram(df,x='Sex',color='HeartDisease',barmode='group',title='Distribution Of Sick And The Healthy')

print(df.columns)

# One-hot encode categorical variables and data preprocessing
X = pd.get_dummies(df.drop('HeartDisease', axis=1))
y = df['HeartDisease']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Model training
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)

svm_model = SVC()
svm_model.fit(X_train, y_train)

knn_model = KNeighborsClassifier()
knn_model.fit(X_train, y_train)

lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)

gb_model = GradientBoostingClassifier()
gb_model.fit(X_train, y_train)

# Model evaluation
def evaluate_model(model, X_test, y_test):
    y_pred = model.predict(X_test)
    acc = accuracy_score(y_test, y_pred)
    precision = precision_score(y_test, y_pred)
    recall = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)
    return {'Accuracy': acc, 'Precision': precision, 'Recall': recall, 'F1 Score': f1}

print("Random Forest Evaluation:", evaluate_model(rf_model, X_test, y_test))
print("SVM Evaluation:", evaluate_model(svm_model, X_test, y_test))
print("KNN Evaluation:", evaluate_model(knn_model, X_test, y_test))
print("Logistic Regression Evaluation:", evaluate_model(lr_model, X_test, y_test))
print("Gradient Boosting Evaluation:", evaluate_model(gb_model, X_test, y_test))